<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Googoke</title>
    <style>
        h1 {
            font-family: Franklin Gothic;
        }
        button {
            font-family: Franklin Gothic;
        }
        body {
            font-family: Franklin Gothic;
            text-align: center;
            margin-top: 20px;
            background: linear-gradient(to right, rgb(0, 70, 117) , rgb(0, 98, 50));
            color: white;
        }
        input[type="search"] {
            width: 70%;
            padding: 10px;
            font-size: 16px;
            border: none;
            background-color: #33333394;
            color: white;
            border-radius: 10px;
            margin-top: 14px;
            transition: 0.45s ease;
        }
        input[type="search"]:hover {
background-color: #222;
        }
        button {
            padding: 10px;
            font-size: 16px;
            cursor: pointer;
            border-radius: 10px;
            border: none;
            background-color: transparent;
            color: white;
            transition: ease-in-out 0.3s;

        }
        button:hover {
            background-color: white;
            color: black;
        }
        #searchBtn {
            background-color: transparent;
            color: white;
        }

        #searchBtn:hover {
            background-color: rgb(154, 249, 209);
            color: black;
        }
        #homepage, #photos, #webapps {
            background-color: transparent;
            color: white;
        }
        #homepage:hover, #photos:hover, #webapps:hover {
            text-decoration: underline;
        }
        #photoModal, #webAppModal {
            display: none;
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background: linear-gradient(rgba(0, 0, 0, 0.368), #33333361);
            color: white;
            text-align: center;
            padding-top: 50px;
            overflow-y: auto;
            transition: 0.3s ease;
        }
        .close-btn {
            position: absolute;
            top: 10px;
            left: 10px;
            background: transparent;
            border: none;
            color: white;
            padding: 10px;
            font-size: 29px;
            cursor: pointer;
        }
        #mediaContainer, #appContainer {
            display: flex;
            flex-wrap: wrap;
            justify-content: center;
            margin-top: 20px;
        }
        .mediaItem, .appItem {
            position: relative;
            margin: 10px;
            border-radius: 10px;
            overflow: hidden;
            max-width: 200px;
            border: 2px solid transparent;
            background-color: #444;
            padding: 10px;
            color: white;
            transition: 0.3s ease-in-out;
        }
        
        .mediaItem.selected, .appItem.selected {
            background: linear-gradient(#1563b6, rgb(8, 156, 77));
            border: none;
        }
        .mediaItem img, .mediaItem video {
            width: 100%;
            height: 150px;
            object-fit: cover;
            border-radius: 10px;
        }
        .upload-buttons {
            display: flex;
            gap: 10px;
            justify-content: center;
            margin: 20px 0;
            flex-wrap: wrap;
        }
        .mediaItem, .appItem:hover {
            background-color: #1563b6;
            cursor: pointer;
        }
        .upload-buttons button {
            background-color: #28a745;
            color: white;
        }
        .upload-buttons button:hover {
            color: white;
            
            background-color: #74747462;
        }
        .action-buttons {
            display: flex;
            justify-content: center;
            gap: 10px;
            margin-top: 15px;
            flex-wrap: wrap;
        }
        #viewerModal {
            display: none;
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background-color: rgba(0, 0, 0, 0.95);
            z-index: 9999;
            justify-content: center;
            align-items: center;
        }
        #viewerContent {
            width: 90%;
            height: 90%;
            display: flex;
            justify-content: center;
            align-items: center;
            border: none;
        }
        #viewerContent iframe, #viewerContent img {
            width: 90%;
            height: 90%;
            border-radius: 10px;
            box-shadow: 0 0 20px rgba(5, 83, 70, 0.96);
            border: none;
        }
        #viewerContent video {
            max-width: 90%;
            max-height: 90%;
            border-radius: 10px;
            box-shadow: 0 0 20px rgba(5, 83, 70, 0.96);
            border: none;
        }
        .video-indicator {
            position: absolute;
            top: 5px;
            right: 5px;
            font-size: 20px;
            background-color: rgba(0, 0, 0, 0.5);
            border-radius: 50%;
            width: 30px;
            height: 30px;
            display: flex;
            justify-content: center;
            align-items: center;
        }
        #statusMessage {
            color: #28a745;
            margin: 10px 0;
            font-weight: bold;
        }
        .file-size {
            display: block;
            font-size: 12px;
            color: #ccc;
            margin-top: 5px;
        }
        .progress-bar {
            width: 100%;
            background-color: #444;
            border-radius: 5px;
            margin: 5px 0;
            height: 10px;
            overflow: hidden;
        }
        .progress {
            height: 100%;
            background-color: #28a745;
            width: 0%;
            transition: width 0.3s;
        }
        #depu:focus {
            outline: none;
            background: linear-gradient(#004536, #001f43);
        }

    </style>
</head>
<body>

    <button id="homepage">Googoke 1.0</button>
    <button id="photos">Media</button>
    <button id="webapps">Web Apps</button>

    <form action="https://www.google.com/search" method="GET" target="_blank">
        <input type="search" id="depu" name="q" placeholder="Search Google or open an URL">
        <button type="submit" id="searchBtn"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 20" width="28" height="15" fill="currentColor"><path d="M15.5 14h-.79l-.28-.27a6.5 6.5 0 0 0 1.48-5.34c-.47-2.78-2.79-5-5.59-5.34a6.505 6.505 0 0 0-7.27 7.27c.34 2.8 2.56 5.12 5.34 5.59a6.5 6.5 0 0 0 5.34-1.48l.27.28v.79l5 4.99L20.49 19l-4.99-5zm-6 0C7.01 14 5 11.99 5 9.5S7.01 5 9.5 5 14 7.01 14 9.5 11.99 14 9.5 14z"/></svg></button>
        <button type="button" onclick="GTY(event)"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 21" width="28" height="15" fill="currentColor"><path d="M19 19H5V5h7V3H5c-1.11 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2v-7h-2v7zM14 3v2h3.59l-9.83 9.83 1.41 1.41L19 6.41V10h2V3h-7z"/></svg></button>
    </form>

    <div id="photoModal">
        <button class="close-btn" onclick="closeModal('photoModal')">&times;</button>
        <h2>Your Media</h2>
        <div class="upload-buttons">
            <button onclick="document.getElementById('uploadInput').click()">Choose Media</button>
            <button onclick="uploadMedia()">Upload Media</button>
        </div>
        <input type="file" id="uploadInput" accept="image/*,video/*,.mp4,.webm,.ogg,.mov,.avi" multiple style="display: none;">
        <div id="statusMessage"></div>
        <div id="progressContainer" style="display: none;">
            <div class="progress-bar">
                <div id="progressBar" class="progress"></div>
            </div>
        </div>

        <div class="action-buttons">
            <button onclick="openMedia()">Open</button>
            <button onclick="downloadMedia()">Download</button>
            <button onclick="deleteMedia()">Delete</button>
        </div>
        <div id="mediaContainer"></div>
    </div>

    <div id="webAppModal">
        <button class="close-btn" onclick="closeModal('webAppModal')">&times;</button>
        <h2>Your Web Apps</h2>
        <div class="upload-buttons">
            <button onclick="document.getElementById('webAppInput').click()">Choose HTML App</button>
            <button onclick="uploadWebApp()">Upload App</button>
        </div>

        <input type="file" id="webAppInput" accept="text/html" multiple style="display: none;">

        <div class="action-buttons">
            <button onclick="openWebApp()">Open</button>
            <button onclick="downloadWebApp()">Download</button>
            <button onclick="deleteWebApp()">Delete</button>
        </div>
        <div id="appContainer"></div>
    </div>

    <div id="viewerModal" onclick="closeViewer()">
        <div id="viewerContent" onclick="event.stopPropagation();"></div>
    </div>

    <script>
        let selectedIndex = null;
        let selectedAppIndex = null;
        let db;
        let mediaMetadata = [];

        // Initialize IndexedDB
        function initDB() {
            const request = indexedDB.open('MediaManagerDB', 2); // Increased version number

            request.onerror = function(event) {
                console.error("Database error: " + event.target.errorCode);
                showStatus("Database error. Please try again.", "error");
            };

            request.onupgradeneeded = function(event) {
                db = event.target.result;

                // Create object stores
                if (!db.objectStoreNames.contains('media')) {
                    const mediaStore = db.createObjectStore('media', { keyPath: 'id', autoIncrement: true });
                    mediaStore.createIndex('name', 'name', { unique: false });
                    mediaStore.createIndex('type', 'type', { unique: false });
                }
            };

            request.onsuccess = function(event) {
                db = event.target.result;
                loadMediaMetadata();
            };

          request.onblocked = function(event) { // Handle blocked events
              console.warn("Database blocked.  Close other tabs/windows using this database and try again.");
              showStatus("Database blocked. Close other tabs/windows using this database and try again.", "error");
          };
        }

        // Load only media metadata from localStorage
        function loadMediaMetadata() {
            // Get metadata from localStorage
            mediaMetadata = JSON.parse(localStorage.getItem('mediaMetadata')) || [];

            // Display metadata
            if (document.getElementById('photoModal').style.display === 'block') {
                loadMedia();
            }
        }

        function formatFileSize(bytes) {
            if (bytes < 1024) return bytes + ' B';
            else if (bytes < 1048576) return (bytes / 1024).toFixed(2) + ' KB';
            else return (bytes / 1048576).toFixed(2) + ' MB';
        }

        function GTY(event) {
            event.preventDefault();
            let url = document.getElementById('depu').value;
            if (url) {
                window.open(url.startsWith('http') ? url : 'https://' + url);
            }
        }

        document.getElementById('photos').addEventListener('click', () => {
            document.getElementById('photoModal').style.display = 'block';
            loadMedia();
        });

        document.getElementById('webapps').addEventListener('click', () => {
            document.getElementById('webAppModal').style.display = 'block';
            loadWebApps();
        });

        document.getElementById('homepage').addEventListener('click', () => {
            document.getElementById('photoModal').style.display = 'none';
            document.getElementById('webAppModal').style.display = 'none';
        });

        function closeModal(id) {
            document.getElementById(id).style.display = 'none';
        }

        function closeViewer() {
            const viewer = document.getElementById('viewerModal');
            viewer.style.display = 'none';

            // Pause any videos that might be playing
            const videoElements = document.querySelectorAll('#viewerContent video');
            videoElements.forEach(video => {
                if (video && typeof video.pause === 'function') {
                    video.pause();
                }
            });

            // Clear the viewer content to free up resources
            document.getElementById('viewerContent').innerHTML = '';
        }

        function showStatus(message, type = 'success') {
            const statusElement = document.getElementById('statusMessage');
            statusElement.textContent = message;
            statusElement.style.color = type === 'error' ? '#dc3545' : '#28a745';

            // Clear the message after 5 seconds
            setTimeout(() => {
                statusElement.textContent = '';
            }, 5000);
        }

        function updateProgress(percent) {
            const progressContainer = document.getElementById('progressContainer');
            const progressBar = document.getElementById('progressBar');

            if (percent === 0) {
                progressContainer.style.display = 'none';
                progressBar.style.width = '0%';
                return;
            }

            progressContainer.style.display = 'block';
            progressBar.style.width = percent + '%';

            if (percent === 100) {
                setTimeout(() => {
                    progressContainer.style.display = 'none';
                }, 1000);
            }
        }

        function createVideoThumbnail(videoFile, callback) {
            const video = document.createElement('video');
            video.preload = 'metadata';

            // Set timeout in case video metadata loading takes too long
            const timeoutId = setTimeout(() => {
                // If metadata loading takes too long, use a placeholder
                callback('data:image/svg+xml;utf8,<svg xmlns="http://www.w3.org/2000/svg" width="200" height="150" viewBox="0 0 200 150"><rect width="100%" height="100%" fill="black"/><text x="50%" y="50%" font-family="Arial" font-size="20" fill="white" text-anchor="middle" dominant-baseline="middle">Video</text></svg>');
            }, 5000);

            video.onloadedmetadata = function() {
                clearTimeout(timeoutId);
                // Set to a frame 25% into the video
                video.currentTime = Math.min(video.duration * 0.25, 5.0);
            };

            video.oncanplay = function() {
                clearTimeout(timeoutId);
                // Create canvas and draw video frame
                const canvas = document.createElement('canvas');
                canvas.width = 200;
                canvas.height = 150;
                const ctx = canvas.getContext('2d');
                ctx.drawImage(video, 0, 0, canvas.width, canvas.height);

                // Get thumbnail as data URL
                const thumbnailUrl = canvas.toDataURL('image/jpeg');
                callback(thumbnailUrl);

                // Clean up
                video.pause();
                URL.revokeObjectURL(video.src);
            };

            video.onerror = function() {
                clearTimeout(timeoutId);
                // If there's an error, use a placeholder
                callback('data:image/svg+xml;utf8,<svg xmlns="http://www.w3.org/2000/svg" width="200" height="150" viewBox="0 0 200 150"><rect width="100%" height="100%" fill="black"/><text x="50%" y="50%" font-family="Arial" font-size="20" fill="white" text-anchor="middle" dominant-baseline="middle">Video</text></svg>');
            };

            video.src = URL.createObjectURL(videoFile);
        }

        function sanitizeHTML(html) {
          const tempDiv = document.createElement('div');
          tempDiv.textContent = html; // Encode HTML entities
          return tempDiv.innerHTML; // Return encoded HTML
        }

        function uploadMedia() {
            const input = document.getElementById('uploadInput');
            const files = input.files;

            if (files.length === 0) return;

            showStatus("Uploading files...");
            updateProgress(0);

            let totalFiles = files.length;
            let processedFiles = 0;

            for (let i = 0; i < files.length; i++) {
                const file = files[i];
                const fileSize = file.size;

                // Generate a unique ID for the file
                const fileId = Date.now() + '_' + Math.random().toString(36).substring(2, 15);

                if (file.type.startsWith('video')) {
                    // Create thumbnail for videos
                    createVideoThumbnail(file, function(thumbnailUrl) {
                        // Store metadata in localStorage
                        const metadataItem = {
                            id: fileId,
                            name: file.name,
                            type: file.type,
                            size: fileSize,
                            thumbnail: thumbnailUrl,
                            dateAdded: new Date().toISOString()
                        };

                        mediaMetadata.push(metadataItem);
                        localStorage.setItem('mediaMetadata', JSON.stringify(mediaMetadata));

                        // Store actual file data in IndexedDB
                        const transaction = db.transaction(['media'], 'readwrite');
                        const mediaStore = transaction.objectStore('media');

                        const mediaItem = {
                            id: fileId,
                            name: file.name,
                            type: file.type,
                            size: fileSize,
                            data: file
                        };

                        const request = mediaStore.add(mediaItem);

                        request.onsuccess = function() {
                            processedFiles++;
                            updateProgress(Math.round((processedFiles / totalFiles) * 100));

                            if (processedFiles === totalFiles) {
                                showStatus("Upload complete!");
                                input.value = "";
                                loadMedia();
                            }
                        };

                        request.onerror = function(event) {
                            console.error("Error uploading file to IndexedDB: ", event); // Log detailed error
                            showStatus("Error uploading file: " + file.name + ".  See console for details.", "error");
                            processedFiles++;
                            updateProgress(Math.round((processedFiles / totalFiles) * 100));
                        };
                    });
                } else {
                    // For images, use the old way with dataURL in localStorage
                    const reader = new FileReader();

                    reader.onload = function(e) {
                        // Store everything in metadata for images
                        const metadataItem = {
                            id: fileId,
                            name: file.name,
                            type: file.type,
                            size: fileSize,
                            src: e.target.result,
                            dateAdded: new Date().toISOString()
                        };

                        mediaMetadata.push(metadataItem);
                        localStorage.setItem('mediaMetadata', JSON.stringify(mediaMetadata));

                        processedFiles++;
                        updateProgress(Math.round((processedFiles / totalFiles) * 100));

                        if (processedFiles === totalFiles) {
                            showStatus("Upload complete!");
                            input.value = "";
                            loadMedia();
                        }
                    };

                    reader.onerror = function(event) { // Added event parameter
                        console.error("Error reading file: ", event); // Log the error
                        showStatus("Error reading file: " + file.name + ": " + event.message, "error"); // Show detailed error
                        processedFiles++;
                        updateProgress(Math.round((processedFiles / totalFiles) * 100));
                    };

                    reader.readAsDataURL(file);
                }
            }
        }

        function loadMedia() {
            let container = document.getElementById('mediaContainer');
            container.innerHTML = '';

            if (mediaMetadata.length === 0) {
                container.innerHTML = '<p>No media files yet. Upload some!</p>';
                return;
            }

            mediaMetadata.forEach((item, index) => {
                let div = document.createElement('div');
                div.className = 'mediaItem';
                if (index === selectedIndex) div.classList.add('selected');

                let element = document.createElement('img');

                if (item.type.startsWith('image')) {
                    element.src = item.src;
                } else if (item.type.startsWith('video')) {
                    element.src = item.thumbnail;

                    // Add video indicator
                    let videoIndicator = document.createElement('div');
                    videoIndicator.innerHTML = '▶️';
                    videoIndicator.className = 'video-indicator';
                    div.appendChild(videoIndicator);
                }

                // Add file name and size
                let fileInfo = document.createElement('div');
                fileInfo.textContent = item.name;
                let fileSize = document.createElement('span');
                fileSize.className = 'file-size';
                fileSize.textContent = formatFileSize(item.size);
                fileInfo.appendChild(fileSize);

                element.title = item.name;
                div.addEventListener('click', () => {
                    selectedIndex = index;
                    loadMedia();
                });
                div.addEventListener('dblclick', () => showInViewer(item));

                div.appendChild(element);
                div.appendChild(fileInfo);
                container.appendChild(div);
            });
        }

        function deleteMedia() {
            if (selectedIndex === null) return;

            const item = mediaMetadata[selectedIndex];
            if (!item || !confirm(`Delete "${item.name}"?`)) return;

            if (item.type.startsWith('video')) {
                // Delete from IndexedDB
                const transaction = db.transaction(['media'], 'readwrite');
                const mediaStore = transaction.objectStore('media');

                const request = mediaStore.delete(item.id);

                request.onsuccess = function() {
                    // Also remove from metadata
                    mediaMetadata.splice(selectedIndex, 1);
                    localStorage.setItem('mediaMetadata', JSON.stringify(mediaMetadata));
                    selectedIndex = null;
                    loadMedia();
                    showStatus("Media deleted successfully");
                };

                request.onerror = function(event) { // Added event parameter
                    console.error("Error deleting from IndexedDB: ", event);
                    showStatus("Error deleting media: " + event.message, "error");
                };
            } else {
                // Just remove from metadata for images
                mediaMetadata.splice(selectedIndex, 1);
                localStorage.setItem('mediaMetadata', JSON.stringify(mediaMetadata));
                selectedIndex = null;
                loadMedia();
                showStatus("Media deleted successfully");
            }
        }

        function openMedia() {
            if (selectedIndex === null) return;

            const item = mediaMetadata[selectedIndex];
            if (item) {
                showInViewer(item);
            }
        }

        function downloadMedia() {
            if (selectedIndex === null) return;

            const item = mediaMetadata[selectedIndex];
            if (!item) return;

            if (item.type.startsWith('video')) {
                // Get file from IndexedDB
                const transaction = db.transaction(['media'], 'readonly');
                const mediaStore = transaction.objectStore('media');

                const request = mediaStore.get(item.id);

                request.onsuccess = function(event) {
                    const mediaFile = event.target.result;
                    if (mediaFile) {
                        const url = URL.createObjectURL(mediaFile.data);
                        const a = document.createElement('a');
                        a.href = url;
                        a.download = item.name;
                        a.click();
                        setTimeout(() => URL.revokeObjectURL(url), 5000);
                    }
                };

                request.onerror = function(event) {
                    console.error("Error downloading from IndexedDB: ", event);
                    showStatus("Error downloading media: " + event.message, "error");
                };
            } else {
                // Direct download for images
                const a = document.createElement('a');
                a.href = item.src;
                a.download = item.name;
                a.click();
            }
        }

        function showInViewer(item) {
            const viewer = document.getElementById('viewerModal');
            const viewerContent = document.getElementById('viewerContent');
            viewerContent.innerHTML = '';

            if (item.type && item.type.startsWith('image')) {
                const element = document.createElement('img');
                element.src = item.src;
                viewerContent.appendChild(element);
                viewer.style.display = 'flex';
            } else if (item.type && item.type.startsWith('video')) {
                showStatus("Loading video...");

                // Get video from IndexedDB
                const transaction = db.transaction(['media'], 'readonly');
                const mediaStore = transaction.objectStore('media');

                const request = mediaStore.get(item.id);

                request.onsuccess = function(event) {
                    const mediaFile = event.target.result;
                    if (mediaFile && mediaFile.data) {
                        try {
                            // Create object URL from the blob/file
                            const url = URL.createObjectURL(mediaFile.data);

                            // Create video element
                            const element = document.createElement('video');
                            element.controls = true;
                            element.autoplay = true;
                            element.loop = false;
                            element.preload = "auto";

                            // Add event listeners for debugging
                            element.addEventListener('loadstart', () => console.log('Video loadstart'));
                            element.addEventListener('loadedmetadata', () => console.log('Video loadedmetadata'));
                            element.addEventListener('loadeddata', () => console.log('Video loadeddata'));
                            element.addEventListener('play', () => console.log('Video play event'));
                            element.addEventListener('canplay', () => {
                                console.log('Video canplay event');
                                showStatus("");
                            });
                            element.addEventListener('error', (e) => {
                                console.error('Video error:', e);
                                showStatus("Error playing video: " + (element.error ? element.error.message : "Unknown error"), "error");
                            });

                            // Set the source
                            element.src = url;

                            // Add source element as fallback
                            const source = document.createElement('source');
                            source.src = url;
                            source.type = mediaFile.type;
                            element.appendChild(source);

                            // Clean up object URL when done with video
                            element.onended = function() {
                                console.log('Video ended');
                            };

                            viewerContent.appendChild(element);
                            viewer.style.display = 'flex';
                        } catch (error) {
                            console.error('Error setting up video:', error);
                            showStatus("Error setting up video: " + error.message, "error");
                        }
                    } else {
                        showStatus("Video file not found in database", "error");
                    }
                };

                request.onerror = function(event) {
                    console.error("Database error in showInViewer:", event.target.errorCode);
                    showStatus("Error loading video from database", "error");
                };
            } else {
                // For web apps
                const element = document.createElement('iframe');
                element.src = item.src;
                viewerContent.appendChild(element);
                viewer.style.display = 'flex';
            }
        }

        function uploadWebApp() {
            const input = document.getElementById('webAppInput');
            const files = input.files;
            if (files.length > 0) {
                const apps = JSON.parse(localStorage.getItem('webapps')) || [];
                let filesProcessed = 0;

                for (let file of files) {
                    const reader = new FileReader();
                    reader.onload = function(e) {
                        const sanitizedHTML = sanitizeHTML(e.target.result);
                        apps.push({
                            src: sanitizedHTML,
                            name: file.name,
                            size: file.size,
                            dateAdded: new Date().toISOString()
                        });
                        filesProcessed++;
                        if (filesProcessed === files.length) {
                            localStorage.setItem('webapps', JSON.stringify(apps));
                            input.value = "";
                            loadWebApps();
                            showStatus("Web app uploaded successfully");
                        }
                    };
                    reader.onerror = function(event) {
                        console.error("Error reading web app file: ", event);
                        showStatus("Error reading web app file: " + event.message, "error");
                    }
                    reader.readAsDataURL(file);
                }
            }
        }

        function loadWebApps() {
            let container = document.getElementById('appContainer');
            container.innerHTML = '';
            let apps = JSON.parse(localStorage.getItem('webapps')) || [];

            if (apps.length === 0) {
                container.innerHTML = '<p>No web apps yet. Upload some HTML files!</p>';
                return;
            }

            apps.forEach((app, index) => {
                let div = document.createElement('div');
                div.className = 'appItem';
                if (index === selectedAppIndex) div.classList.add('selected');

                div.textContent = app.name;

                // Add file size if available
                if (app.size) {
                    let fileSize = document.createElement('span');
                    fileSize.className = 'file-size';
                    fileSize.textContent = formatFileSize(app.size);
                    div.appendChild(fileSize);
                }

                div.addEventListener('click', () => {
                    selectedAppIndex = index;
                    loadWebApps();
                });
                div.addEventListener('dblclick', () => showInViewer(app));
                container.appendChild(div);
            });
        }

        function deleteWebApp() {
            let apps = JSON.parse(localStorage.getItem('webapps')) || [];
            if (selectedAppIndex !== null && confirm(`Delete "${apps[selectedAppIndex].name}"?`)) {
                apps.splice(selectedAppIndex, 1);
                localStorage.setItem('webapps', JSON.stringify(apps));
                selectedAppIndex = null;
                loadWebApps();
                showStatus("Web app deleted successfully");
            }
        }

        function openWebApp() {
            let apps = JSON.parse(localStorage.getItem('webapps')) || [];
            if (selectedAppIndex !== null) {
                showInViewer(apps[selectedAppIndex]);
            }
        }

        function downloadWebApp() {
            let apps = JSON.parse(localStorage.getItem('webapps')) || [];
            if (selectedAppIndex !== null) {
                const a = document.createElement('a');
                a.href = apps[selectedAppIndex].src;
                a.download = apps[selectedAppIndex].name;
                a.click();
                showStatus("Web app download started");
            }
        }

        // Initialize database on page load
        window.addEventListener('load', initDB);
    </script>

</body>
</html>
